#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main_employees.py sync              # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ API
    python main_employees.py stats             # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    python main_employees.py export            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
"""

import sys
import argparse
import os
import pandas as pd
from loguru import logger

from services.employee_service import EmployeeService


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()
    
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        level="INFO"
    )
    
    logger.add(
        "logs/employees_{time:YYYY-MM-DD}.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        level="DEBUG",
        rotation="1 day",
        retention="30 days"
    )


def sync_employees(args):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    employee_service = EmployeeService()
    
    results = employee_service.sync_employees(
        save_to_db=not args.no_db,
        save_to_csv=not args.no_csv
    )
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
    logger.info(f"   –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {results['total_employees']}")
    logger.info(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {'‚úÖ' if results['db_saved'] else '‚ùå'}")
    if results['csv_file']:
        logger.info(f"   CSV —Ñ–∞–π–ª: {results['csv_file']}")


def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    employee_service = EmployeeService()
    
    try:
        stats = employee_service.get_employee_statistics()
        
        if 'error' in stats:
            logger.error(f"‚ùå {stats['error']}")
            return
        
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:")
        logger.info("="*40)
        logger.info(f"üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:     {stats['total_employees']:>6}")
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:  {stats['active_employees']:>6}")
        logger.info(f"‚ùå –£–≤–æ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['dismissed_employees']:>6}")
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö:      {stats['active_percentage']:>5.1f}%")
        logger.info("="*40)
        
    except Exception as e:
        if "does not exist" in str(e):
            logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            logger.info("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: python main_employees.py sync")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def export_employees():
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ CSV"""
    employee_service = EmployeeService()
    
    try:
        df_employees = employee_service.get_employees_from_postgres()
        if df_employees.empty:
            logger.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename = employee_service.save_employees_to_csv(df_employees.to_dict('records'))
        logger.success(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

def export_current_employees():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–∞–±–æ—á–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ CSV"""
    employee_service = EmployeeService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (5-–∑–Ω–∞—á–Ω—ã–µ ID, –±–µ–∑ –¥–∞—Ç—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è)
        df_current_employees = employee_service.get_current_employees_with_work_data()
        
        if df_current_employees.empty:
            logger.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        timestamp = pd.Timestamp.now().strftime('%Y-%m-%d_%H-%M')
        filename = f"exports/current_employees_{timestamp}.csv"
        
        os.makedirs('exports', exist_ok=True)
        df_current_employees.to_csv(filename, index=False, encoding='utf-8-sig')
        
        logger.success(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
        logger.info(f"üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(df_current_employees)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º
        if 'subdivision_employee' in df_current_employees.columns:
            subdivision_stats = df_current_employees['subdivision_employee'].value_counts()
            logger.info("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º:")
            for subdivision, count in subdivision_stats.head(5).items():
                logger.info(f"   {subdivision}: {count}")
        
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return None
    
def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_parser = subparsers.add_parser('sync', help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ API')
    sync_parser.add_argument('--no-db', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î')
    sync_parser.add_argument('--no-csv', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ CSV')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    subparsers.add_parser('current', help='–≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–∞–±–æ—á–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    
    args = parser.parse_args()
    
    setup_logging()
    
    logger.info("="*50)
    logger.info("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    logger.info("="*50)
    
    try:
        if args.command == 'sync':
            sync_employees(args)
        elif args.command == 'stats':
            show_statistics()
        elif args.command == 'export':
            export_employees()
        elif args.command == 'current':
            export_current_employees()
        else:
            parser.print_help()
            
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()