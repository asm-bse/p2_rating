#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ MES API
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main_upload.py [table_name] [batch_mode]
    
–ü—Ä–∏–º–µ—Ä—ã:
    python main_upload.py                           # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ csv_ratings —Å –±–∞—Ç—á–∞–º–∏
    python main_upload.py mes_ratings               # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ mes_ratings —Å –±–∞—Ç—á–∞–º–∏  
    python main_upload.py csv_ratings false         # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ csv_ratings –±–µ–∑ –±–∞—Ç—á–µ–π
    python main_upload.py --table=mes_ratings       # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    python main_upload.py --no-batch                # –û—Ç–∫–ª—é—á–∏—Ç—å –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
"""

import sys
import argparse
from loguru import logger

from services.rating_uploader import RatingUploader


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        level="INFO"
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –ª–æ–≥
    logger.add(
        "logs/upload_{time:YYYY-MM-DD}.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        level="DEBUG",
        rotation="1 day",
        retention="30 days"
    )


def create_parser():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ MES API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python main_upload.py                           # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ csv_ratings —Å –±–∞—Ç—á–∞–º–∏
    python main_upload.py mes_ratings               # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ mes_ratings —Å –±–∞—Ç—á–∞–º–∏  
    python main_upload.py csv_ratings --no-batch    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –±–∞—Ç—á–µ–π
    python main_upload.py --table=mes_ratings       # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    python main_upload.py --verbose                 # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
    )
    
    parser.add_argument(
        'table_name',
        nargs='?',
        default='csv_ratings',
        help='–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: csv_ratings)'
    )
    
    parser.add_argument(
        'batch_mode',
        nargs='?',
        choices=['true', '1', 'yes', 'y', 'false', '0', 'no', 'n'],
        default='true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)'
    )
    
    parser.add_argument(
        '--table', '-t',
        dest='table_alt',
        help='–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã'
    )
    
    parser.add_argument(
        '--no-batch',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É'
    )
    
    parser.add_argument(
        '--batch-size',
        type=int,
        default=10,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (DEBUG —É—Ä–æ–≤–µ–Ω—å)'
    )
    
    parser.add_argument(
        '--force', '-f',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ API'
    )
    
    return parser


def confirm_upload(record_count: int, table_name: str, use_batches: bool, force: bool = False) -> bool:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
    if force:
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        return True
    
    batch_mode = "–±–∞—Ç—á–∞–º–∏" if use_batches else "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"
    
    logger.info("\n" + "="*50)
    logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
    logger.info("="*50)
    logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞:          {table_name}")
    logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {record_count}")
    logger.info(f"‚öôÔ∏è  –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:  {batch_mode}")
    logger.info("="*50)
    
    while True:
        try:
            confirm = input("\nü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É? (y/n): ").lower().strip()
            if confirm in ['y', 'yes', '–¥–∞']:
                return True
            elif confirm in ['n', 'no', '–Ω–µ—Ç']:
                return False
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' (–¥–∞) –∏–ª–∏ 'n' (–Ω–µ—Ç)")
        except KeyboardInterrupt:
            print("\n")
            logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()
    
    parser = create_parser()
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    table_name = args.table_alt if args.table_alt else args.table_name
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –±–∞—Ç—á–µ–π
    if args.no_batch:
        use_batches = False
    else:
        use_batches = args.batch_mode.lower() in ['true', '1', 'yes', 'y']
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logger.remove()
        logger.add(
            sys.stdout,
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
            level="DEBUG"
        )
        logger.add(
            "logs/upload_{time:YYYY-MM-DD}.log",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
            level="DEBUG",
            rotation="1 day",
            retention="30 days"
        )
    
    logger.info("="*60)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ MES API")
    logger.info("="*60)
    
    if args.dry_run:
        logger.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ API)")
    
    try:
        uploader = RatingUploader()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.batch_size != 10:
            uploader.batch_size = args.batch_size
            logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {args.batch_size}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        df_ratings = uploader.get_ratings_from_postgres(table_name)
        
        if df_ratings.empty:
            logger.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            sys.exit(0)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if not confirm_upload(len(df_ratings), table_name, use_batches, args.force):
            logger.info("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if args.dry_run:
            logger.info("üß™ –†–µ–∂–∏–º dry-run: –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")
            logger.info(f"üìä –ë—ã–ª–æ –±—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_ratings)} –∑–∞–ø–∏—Å–µ–π")
            logger.success("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            uploader.upload_ratings(table_name=table_name, use_batches=use_batches)
            logger.success("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)
    finally:
        logger.info("="*60)


if __name__ == "__main__":
    main()